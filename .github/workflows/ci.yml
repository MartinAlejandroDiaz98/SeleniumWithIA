name: CI - Selenium Tests (WebDriverManager + no headless)

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  test:
      runs-on: ubuntu-latest

      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
          
        - name: Set up JDK 17
          uses: actions/setup-java@v4
          with:
            java-version: '17'
            distribution: 'temurin'

        - name: Cache Maven dependencies
          uses: actions/cache@v4
          with:
            path: ~/.m2
            key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-maven

        # ðŸ”¹ Instala Google Chrome (sin el driver)
        - name: Install Google Chrome
          run: |
            sudo apt-get update
            sudo apt-get install -y wget gnupg2
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
            sudo apt-get update
            sudo apt-get install -y google-chrome-stable

        # 3. Ejecuta los Tests
        - name: Run Maven Tests
          id: run_tests # Asignamos un ID para chequear el estado despuÃ©s
          env:
            DISPLAY: :99
          # **CLAVE:** 'continue-on-error: true' asegura que el flujo siga
          # y suba los resultados aunque haya fallos.
          run: mvn clean test -Dbrowser=chrome
          continue-on-error: true

        # 4. Sube los Resultados CRUDOS de Allure como Artefacto
        - name: Upload Allure Results Artifact
          if: always() # Se ejecuta siempre, falle o no el test
          uses: actions/upload-artifact@v4
          with:
            name: allure-results-raw
            path: target/allure-results # Sube la carpeta con los JSONs

        # 5. Fuerza el Fallo del Job si los Tests Fallaron
        # Esto mantiene el indicador de CI/CD en rojo si los tests no pasaron
        - name: Check Test Status and Fail if necessary
          if: steps.run_tests.outcome == 'failure'
          run: exit 1
          
  # ðŸ”¹ Sube los resultados crudos de Allure como artefacto            
  publish-report:
    name: ðŸ“¦ Publish Allure Report to Pages
    # Depende del job 'test'. Se ejecuta cuando 'test' termina.
    needs: test
    runs-on: ubuntu-latest
    # Se ejecuta SIEMPRE que el job 'test' haya terminado (Ã©xito o fallo)
    if: always() 

    steps:
      # 1. Descarga los resultados crudos subidos por el job anterior
      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-raw
          path: allure-results # Descarga los JSONs aquÃ­

      # 2. Genera el Reporte HTML usando una Action dedicada
      # Esto encapsula 'npm install allure-commandline' y 'allure generate'
      - name: Generate Allure Report HTML
        uses: simple-elf/allure-report-action@v1.7
        with:
          # Directorio de entrada donde se descargaron los resultados
          results_path: allure-results
          # Directorio de salida donde se generarÃ¡ el HTML
          report_path: allure-report

      # 3. Sube el Reporte Generado a GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          # Token de autenticaciÃ³n automÃ¡tico de GitHub
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # El directorio que se subirÃ¡ a la rama 'gh-pages' o 'main/docs'
          publish_dir: allure-report
          # Mensaje de commit para el despliegue
          commit_message: "Automated Allure Report Deployment"